#+TITLE: youngker's emacs configuration
#+OPTIONS: num:nil ^:nil

* Init

** package source
#+BEGIN_SRC emacs-lisp
(package-initialize nil)
(unless (assoc-default "melpa" package-archives)
  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t))
#+END_SRC

** use-package
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(setq use-package-verbose t)
(require 'use-package)
(use-package auto-compile
  :ensure t
  :config (auto-compile-on-load-mode))
(setq load-prefer-newer t)
#+END_SRC

** appearance
*** silence
#+BEGIN_SRC emacs-lisp
(setq visible-bell nil)
(setq ring-bell-function #'ignore)
#+END_SRC

*** font
#+BEGIN_SRC emacs-lisp
(cond
 ((eq window-system 'x)
  (set-face-attribute 'default nil :font "DejaVu Sans Mono 11"))
 ((eq window-system 'w32)
  (set-face-attribute 'default nil :font "Consolas bold 11"))
 ((eq window-system 'ns)
  (set-face-attribute 'default nil :font "Monaco 13")))
#+END_SRC

*** simple
#+BEGIN_SRC emacs-lisp
(when window-system
  (tooltip-mode -1)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1))
#+END_SRC

*** mac
#+BEGIN_SRC emacs-lisp
(when (equal system-type 'darwin)
  (use-package exec-path-from-shell
    :defer t
    :ensure t
    :init
    (exec-path-from-shell-initialize))

  (setq mac-option-modifier 'super)
  (setq mac-command-modifier 'meta)
  (setq ns-function-modifier 'hyper))
#+END_SRC

*** no blinking
#+BEGIN_SRC emacs-lisp
(blink-cursor-mode -1)
#+END_SRC

*** highlight-symbol
#+BEGIN_SRC emacs-lisp
(use-package highlight-symbol
  :ensure t
  :bind (([(control f3)] . highlight-symbol)
         ([(shift f3)]   . highlight-symbol-prev)
         ([(meta f3)]    . highlight-symbol-next)))
#+END_SRC

*** helm
#+BEGIN_SRC emacs-lisp
(use-package helm
  :ensure t
  :diminish helm-mode
  :init
  (progn
    (require 'helm-config)
    (setq helm-idle-delay 0.0 ; update fast sources immediately (doesn't).
          helm-input-idle-delay 0.01 ; this actually updates things
          helm-yas-display-key-on-candidate t
          helm-quick-update           t
          helm-M-x-requires-pattern   nil
          helm-ff-skip-boring-files   t
          helm-split-window-in-side-p t
          helm-M-x-fuzzy-match        t
          helm-buffers-fuzzy-matching t
          helm-recentf-fuzzy-match    t
          helm-semantic-fuzzy-match   t
          helm-imenu-fuzzy-match      t)
    (global-unset-key (kbd "C-x c"))
    (helm-mode))
  :bind (("C-c h"     . helm-command-prefix)
         ("C-x C-f"   . helm-find-files)
         ("C-x b"     . helm-buffers-list)
         ("M-y"       . helm-show-kill-ring)
         ("M-x"       . helm-M-x)
         ("C-x C-i"   . helm-imenu)
         ("C-c h o"   . helm-occur)
         ("C-x f"     . helm-recentf)
         ("C-c h SPC" . helm-all-mark-rings)))
#+END_SRC

*** helm-descbinds
#+BEGIN_SRC emacs-lisp
(use-package helm-descbinds
  :defer t
  :ensure t
  :bind (("C-c h w" . helm-descbinds)))
#+END_SRC

*** helm swoop
#+BEGIN_SRC emacs-lisp
(use-package helm-swoop
  :ensure t
  :bind
  (("M-i"     . helm-swoop)
   ("M-I"     . helm-swoop-back-to-last-point)
   ("C-c M-i" . helm-multi-swoop)
   ("C-x M-i" . helm-multi-swoop-all))
  :config
  (progn
    (define-key ispellearch-mode-map (kbd "M-i") 'helm-swoop-from-isearch)
    (define-key helm-swoop-map (kbd "M-i") 'helm-multi-swoop-all-from-helm-swoop)))
#+END_SRC

*** eopengrok
#+BEGIN_SRC emacs-lisp
(use-package eopengrok
  :defer t
  :ensure t
  :init
  (progn
    (setq eopengrok-jar   "/Users/youngker/Projects/opengrok-0.12.1.5/lib/opengrok.jar")
    (setq eopengrok-ctags "/usr/local/bin/ctags"))
  :bind (("C-c s I" . eopengrok-make-index)
         ("C-c s d" . eopengrok-find-definition)
         ("C-c s f" . eopengrok-find-file)
         ("C-c s s" . eopengrok-find-reference)
         ("C-c s t" . eopengrok-find-text)
         ("C-c s h" . eopengrok-find-history)
         ("C-c s b" . eopengrok-resume)))
#+END_SRC

*** helm-codesearch
#+BEGIN_SRC emacs-lisp
(use-package helm-codesearch
  :defer t
  :ensure t
  :bind (("C-c h f" . helm-codesearch-find-file)
         ("C-c h t" . helm-codesearch-find-pattern)
         ("C-c h I" . helm-codesearch-create-csearchindex)))
#+END_SRC

*** elogcat
#+BEGIN_SRC emacs-lisp
(use-package elogcat
  :defer t
  :ensure t)
#+END_SRC

*** ido-vertical-mode
#+BEGIN_SRC emacs-lisp
(use-package ido-vertical-mode
  :ensure t
  :diminish ido-vertical-mode
  :init
  (progn
    (setq ido-vertical-define-keys 'C-n-C-p-up-down-left-right)
    (ido-vertical-mode)))
#+END_SRC

** Language
*** clojure
#+BEGIN_SRC emacs-lisp
(use-package clj-refactor
  :ensure t
  :init
  (progn
    (add-hook 'clojure-mode-hook
              (lambda ()
                (clj-refactor-mode 1)
                (cljr-add-keybindings-with-prefix "C-c C-m")))))
#+END_SRC
